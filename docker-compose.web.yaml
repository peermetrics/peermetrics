version: '3.7'

services:
  # nginx:
  #   build: ./nginx
  #   ports:
  #     - 8080:8080
  #     - 8081:8081
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/conf.d:/etc/nginx/conf.d:ro
  #     - static_volume:/app/static
  #   depends_on:
  #     - api
  #     - web
  #   restart: "on-failure"

  web:
    build: ./web
    image: peermetrics_os_web
    command: "gunicorn web.wsgi:application --bind 0.0.0.0:8080 --log-level debug --reload"

    working_dir: /app
    volumes:
      - ./web:/app

    env_file: 
      - ./web/.env
    ports:
      - 8080:8080
    # expose:
    #   - 8080
    restart: "on-failure"

    depends_on:
      - postgres

  api:
    build: ./api
    image: peermetrics_os_api
    command: >
      sh -c "python manage.py makemigrations && 
      python manage.py migrate &&
      gunicorn api.wsgi:application --bind 0.0.0.0:8081 --log-level debug --reload"

    working_dir: /app
    volumes:
      - ./api:/app
      # - static_volume:/app/static

    env_file: 
    - ./api/.env
    ports:
      - 8081:8081
    # expose:
    #   - 8081

    restart: "on-failure"

    depends_on:
      - postgres

  postgres:
    build:
      context: .
      dockerfile: postgres-dockerfile
    environment:
      POSTGRES_PASSWORD: peeruser
      POSTGRES_USER: peeruser
      POSTGRES_DB: peerdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    restart: always
  # web-watcher:
  #   build:
  #     context: ./web
  #     dockerfile: ./web-watcher-dockerfile
  #   command: npm run watch
  #   working_dir: /app
  #   volumes:
  #     - ./web:/app
  redis:
    container_name: redis
    image: redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    entrypoint: redis-server --appendonly yes
    restart: always

volumes:
  postgres_data:
  redis_data:
  static_volume: